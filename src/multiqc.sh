#!/bin/bash
# multiqc 1.0.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#

# Exit at any point if there is any error and output each line as it is executed (for debugging)
set -e -x -o pipefail

main() {

    #echo "Value of eggd_multiqc_config_file: '$eggd_multiqc_config_file'"
   
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    
    # SET VARIABLES
    # Download the config file and qc files into 'inputs' folder
    mkdir inputs
    dx download "$eggd_multiqc_config_file" -o eggd_multiqc_config_file
    dx download "$project_for_multiqc:fastqc/*" -o ./inputs/
    # Download the tar-zipped docker image
    dx download "$multiqc_docker_image"

    # Create the output folders that will be recognised by the job upon completion
    outdir=out/multiqc_data_files && mkdir -p ${outdir}
    report_outdir=out/multiqc_html_report && mkdir -p ${report_outdir}

    project=$(echo $project_for_multiqc | sed 's/003_//')

    # Fill in your application code here.
    
    # Load the tar-zipped docker image
    docker load -i multiqc_v1.8.tar
    # The docker -v flag mounts a local directory to the docker environment in the format:
    #    -v local_dir:docker_dir
    # MultiQC is run with the following parameters :
    #    multiqc <dir containing files> -n <path/to/output> -c </path/to/config>
    docker run -v ${PWD}:${PWD} -w ${PWD} ewels/multiqc:1.8 ./inputs/ -n ./${outdir}/${project}.html -c /home/dnanexus/eggd_multiqc_config_file

    
    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    # Move the config file to the multiqc data output folder. This was created by running multiqc
    mv eggd_multiqc_config_file ${outdir}/${project}_data/
    # Move the multiqc report HTML to the output directory for uploading
    mv ${outdir}/${project}.html ${report_outdir}

    # Upload results
    dx-upload-all-outputs
   
    #html_report=$(dx upload html_report --brief)
    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it does.
}
