#!/bin/bash
# multiqc 1.0.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

# Exit at any point if there is any error and output each line as it is executed (for debugging)
set -e -x -o pipefail

main() {

    echo "Value of eggd_multiqc_config_file: '$eggd_multiqc_config_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$eggd_multiqc_config_file" -o eggd_multiqc_config_file
    mkdir out
    #dx download "$project_for_multiqc:output/X011281_metrics/*" -r -o ./out/
    dx download "$project_for_multiqc:fastqc/*" -r -o ./out/
    dx download project-FpG6p8j4ZY3X4KGQB9KK5zZf:file-FpQg5fj4g59gqqfK3gGkFVQg


    #for i in "$project_for_multiqc:output/*"; do
    #echo $i
    #dx download "$i/*" #-o $project_for_multiqc:output/*/*
    #done
    
    #dx ls

    #ls

    #dx download /output/*.txt -r -a -o /output/*.txt

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    #dx docker run -v ewels/multiqc:1.8 multiqc ./output -n ./multiQC -c "$eggd_multiqc_config_file"

    #dockerd &

    
    #docker pull ewels/multiqc:1.8
    docker load -i multiqc_v1.8.tar
    
    mkdir outdir
    docker run -v ${PWD}:${PWD} -w ${PWD} ewels/multiqc:1.8 -n ./outdir/multiqc_out.html -c /home/dnanexus/eggd_multiqc_config_file ./out/

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    html_report=$(dx upload html_report --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output html_report "$html_report" --class=file
    for i in "${!multiqc_data_files[@]}"; do
        dx-jobutil-add-output multiqc_data_files "${multiqc_data_files[$i]}" --class=array:file
    done
}
