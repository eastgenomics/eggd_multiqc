#!/bin/bash
# multiqc 1.0.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

# Exit at any point if there is any error and output each line as it is executed (for debugging)
set -e -x -o pipefail

main() {

    echo "Value of eggd_multiqc_config_file: '$eggd_multiqc_config_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    # get the config file
    dx download "$eggd_multiqc_config_file" -o eggd_multiqc_config_file

    # get all the QC files (here stored in the output folder) and put into 'out'
    mkdir inp
    for i in $(dx ls $project_for_multiqc:output); do
      dx download $project_for_multiqc:output/"$i"/* -o ./inp/
    done

    # get the multiqc docker image (stored in 001)
    dx download "$docker_image" -o docker_image

    # load the multiqc docker image
    docker load -i docker_image

    # make a folder to put the output in, and run multiqc
    # -v maps the dnanexus directory to the docker directory, -w specifies the working directory
    # -n is the location for multiqc output, -c is the path to the config file
    mkdir outp
    docker run -v ${PWD}:${PWD} -w ${PWD} ewels/multiqc:1.8 -n ./outp/${project_for_multiqc}_multiqc_report -c /home/dnanexus/eggd_multiqc_config_file ./inp/

    # move output to directories DNAnexus will recognise
    mkdir -p out/multiqc_data_files
    mkdir -p out/html_report
    mv ./outp/${project_for_multiqc}_multiqc_report.html out/html_report
    mv ./outp/${project_for_multiqc}_multiqc_report_data/* out/multiqc_data_files

    # upload output back to dnanexus
    dx-upload-all-outputs
    #html_report=$(dx upload ./out/${project_for_multiqc}_multiqc_report.html --path $project_for_multiqc:${outdir})
    #multiqc_data_files=$(dx upload ./out/${project_for_multiqc}_multiqc_report_data/* -r --path $project_for_multiqc:${outdir})

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    #dx-jobutil-add-output html_report "$html_report" --class=file
    #data_files=./out/${project_for_multiqc}_multiqc_report_data/*
    #for i in "${!multiqc_data_files[@]}"; do
    #    dx-jobutil-add-output multiqc_data_files "${multiqc_data_files[$i]}" --class=array:file
    #done
}
